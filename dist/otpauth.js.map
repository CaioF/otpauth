{"version":3,"sources":["webpack://OTPAuth/webpack/universalModuleDefinition","webpack://OTPAuth/webpack/bootstrap","webpack://OTPAuth/./src/utils.js","webpack://OTPAuth//tmp/builtin-sjcl-21304LKDzkOJUyN6h","webpack://OTPAuth/./src/crypto.js","webpack://OTPAuth/./src/secret.js","webpack://OTPAuth/./src/uri.js","webpack://OTPAuth/./src/otp.js","webpack://OTPAuth/./src/version.js","webpack://OTPAuth/./src/main.js"],"names":["Utils","uint","decode","buf","arr","Uint8Array","num","i","length","encode","ArrayBuffer","acc","raw","str","String","fromCharCode","charCodeAt","b32","alphabet","bits","value","strUpp","toUpperCase","index","idx","indexOf","TypeError","hex","hexByte","toString","parseInt","substr","pad","digits","prefix","repeat","InternalUtils","globalThis","getGlobalThis","Object","defineProperty","prototype","get","configurable","__gt__","console","reduce","c","n","isNode","call","process","require","name","eval","Crypto","randomBytes","undefined","hmacDigest","NodeBuffer","Buffer","NodeCrypto","nodeBufferFromArrayBuffer","from","arrayBuffer","nodeBuffer","byteLength","uint8Array","nodeBufferToArrayBuffer","buffer","size","algorithm","key","message","hmac","createHmac","update","digest","BrowserCrypto","crypto","msCrypto","getRandomValues","array","warn","Math","floor","random","hash","sjcl","toLowerCase","misc","codec","toBits","fromBits","Secret","enumerable","writable","OTPURI_PARAMS","OTPURI_REGEX","RegExp","join","SECRET_REGEX","ALGORITHM_REGEX","INTEGER_REGEX","POSITIVE_INTEGER_REGEX","URI","uri","uriGroups","match","error","Array","isArray","URIError","uriType","uriLabel","split","map","decodeURIComponent","uriParams","cur","pairArr","pairKey","pairVal","pairAcc","OTP","config","HOTP","counter","test","TOTP","period","label","issuer","secret","otp","legacyIssuer","isHOTP","isTOTP","encodeURIComponent","defaults","window","fromB32","generate","token","validate","stringify","offset","generatedToken","timestamp","Date","now","version"],"mappings":"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AhB,CAAJ;AAAA,CAA5B,C;;;;;;;;;;;;;AC1SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,iCAAiC;AACnE;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,kCAAkC,iCAAiC;AACnE;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,kCAAkC,6BAA6B;AAC/D;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,kCAAkC,mCAAmC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,SAAS;AACtB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,SAAS;AACtB,aAAa,SAAS;AACtB,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,SAAS;AACtB,cAAc,OAAO;AACrB;AACA;AACA;AACA,kBAAkB,UAAU;AAC5B;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,SAAS;AACtB,aAAa,OAAO;AACpB,cAAc,SAAS;AACvB;AACA;AACA,8BAA8B,UAAU;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc,OAAO;AACrB;AACA;AACA,qBAAqB,UAAU;AAC/B;AACA,GAAG;;AAEH;AACA;AACA,aAAa,OAAO;AACpB,cAAc,OAAO;AACrB;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,SAAS;AACtB,aAAa,SAAS;AACtB,cAAc,QAAQ,gBAAgB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,YAAY;AACzB;AACA;AACA;AACA,GAAG;;AAEH;AACA,aAAa,SAAS;AACtB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA,4BAA4B,UAAU;;AAEtC,UAAU,aAAa;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,YAAY;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,cAAc;AAC3B,cAAc,cAAc;AAC5B;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,CAAC,SAAI;AACR;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA,aAAa,cAAc;AAC3B,uCAAuC;AACvC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,YAAY,YAAY;AACxB;AACA;;;AAGA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,SAAS;AAC5B;AACA;;AAEA;AACA;AACA,8CAA8C,OAAO;AACrD;AACA,oDAAoD;AACpD;AACA;AACA;AACA,Q;AACA;AACA;AACA,GAAG;;;;AAIH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,iCAAiC;AACtD;AACA;AACA;;AAEA;AACA,8BAA8B,kBAAkB;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,YAAY,SAAS;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B,QAAQ;AAClC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,qBAAqB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,qBAAqB,MAAM;AAC3B;AACA;AACA,KAAK;AACL;AACA;;AAEA,aAAa,UAAU,UAAU,UAAU,U;;AAE3C,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oBAAoB;AAC1C;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,YAAY,SAAS;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wCAAwC,SAAS;AACjD;AACA;AACA;AACA;AACA,KAAK;AACL,oCAAoC,SAAS;AAC7C;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;;AAEA;AACA;;AAEA;AACA,0BAA0B,QAAQ;AAClC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,4CAA4C;;AAElE,UAAU,MAAM;AAChB;AACA,oBAAoB,wBAAwB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,qBAAqB;AAClC;AACA;AACA,uB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,MAAM;AACnB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA,4GAA4G;;AAE5G;AACA,cAAc,SAAS;AACvB;AACA,cAAc,SAAS;;AAEvB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oBAAoB;AAC1C;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,YAAY,SAAS;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA,KAAK;AACL,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;;AAEA;AACA;;AAEA;AACA,0BAA0B,QAAQ;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,4CAA4C;AACnE,uBAAuB,iDAAiD;;AAExE,UAAU,MAAM;AAChB;AACA,oBAAoB,wBAAwB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,qBAAqB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,qBAAqB,MAAM;AAC3B,yB;AACA;AACA,KAAK;AACL;AACA,K;;AAEA;AACA;AACA;AACA;AACA;;AAEA,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,WAAW,MAAM;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,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","file":"otpauth.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"OTPAuth\"] = factory();\n\telse\n\t\troot[\"OTPAuth\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/**\n * An object containing some utilities.\n * @namespace Utils\n * @type {Object}\n */\nexport const Utils = {};\n\n/**\n * UInt conversion.\n * @memberof Utils\n * @namespace Utils.uint\n * @type {Object}\n */\nUtils.uint = {};\n\n/**\n * Converts an ArrayBuffer to an integer.\n * @memberof Utils.uint\n * @method decode\n * @param {ArrayBuffer} buf ArrayBuffer.\n * @returns {number} Integer.\n */\nUtils.uint.decode = buf => {\n\tconst arr = new Uint8Array(buf);\n\tlet num = 0;\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] !== 0) {\n\t\t\tnum *= 256;\n\t\t\tnum += arr[i];\n\t\t}\n\t}\n\n\treturn num;\n};\n\n/**\n * Converts an integer to an ArrayBuffer.\n * @memberof Utils.uint\n * @method encode\n * @param {number} num Integer.\n * @returns {ArrayBuffer} ArrayBuffer.\n */\nUtils.uint.encode = num => {\n\tconst buf = new ArrayBuffer(8);\n\tconst arr = new Uint8Array(buf);\n\tlet acc = num;\n\n\tfor (let i = 7; i >= 0; i--) {\n\t\tif (acc === 0) {\n\t\t\tbreak;\n\t\t}\n\n\t\tarr[i] = acc & 255;\n\t\tacc -= arr[i];\n\t\tacc /= 256;\n\t}\n\n\treturn buf;\n};\n\n/**\n * Raw string conversion.\n * @memberof Utils\n * @namespace Utils.raw\n * @type {Object}\n */\nUtils.raw = {};\n\n/**\n * Converts an ArrayBuffer to a string.\n * @memberof Utils.raw\n * @method decode\n * @param {ArrayBuffer} buf ArrayBuffer.\n * @returns {string} String.\n */\nUtils.raw.decode = buf => {\n\tconst arr = new Uint8Array(buf);\n\tlet str = '';\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tstr += String.fromCharCode(arr[i]);\n\t}\n\n\treturn str;\n};\n\n/**\n * Converts a string to an ArrayBuffer.\n * @memberof Utils.raw\n * @method encode\n * @param {string} str String.\n * @returns {ArrayBuffer} ArrayBuffer.\n */\nUtils.raw.encode = str => {\n\tconst buf = new ArrayBuffer(str.length);\n\tconst arr = new Uint8Array(buf);\n\n\tfor (let i = 0; i < str.length; i++) {\n\t\tarr[i] = str.charCodeAt(i);\n\t}\n\n\treturn buf;\n};\n\n/**\n * Base32 string conversion.\n * @memberof Utils\n * @namespace Utils.b32\n * @type {Object}\n */\nUtils.b32 = {};\n\n/**\n * RFC 4648 base32 alphabet without pad.\n * @memberof Utils.b32\n * @type {string}\n */\nUtils.b32.alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\n\n/**\n * Converts an ArrayBuffer to a base32 string (RFC 4648).\n * @see https://github.com/LinusU/base32-decode\n * @memberof Utils.b32\n * @method decode\n * @param {ArrayBuffer} buf ArrayBuffer.\n * @returns {string} Base32 string.\n */\nUtils.b32.decode = buf => {\n\tconst arr = new Uint8Array(buf);\n\n\tlet bits = 0;\n\tlet value = 0;\n\tlet str = '';\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tvalue = (value << 8) | arr[i];\n\t\tbits += 8;\n\n\t\twhile (bits >= 5) {\n\t\t\tstr += Utils.b32.alphabet[(value >>> bits - 5) & 31];\n\t\t\tbits -= 5;\n\t\t}\n\t}\n\n\tif (bits > 0) {\n\t\tstr += Utils.b32.alphabet[(value << 5 - bits) & 31];\n\t}\n\n\treturn str;\n};\n\n/**\n * Converts a base32 string to an ArrayBuffer (RFC 4648).\n * @see https://github.com/LinusU/base32-encode\n * @memberof Utils.b32\n * @method encode\n * @param {string} str Base32 string.\n * @returns {ArrayBuffer} ArrayBuffer.\n */\nUtils.b32.encode = str => {\n\tconst strUpp = str.toUpperCase();\n\tconst buf = new ArrayBuffer((str.length * 5) / 8 | 0);\n\tconst arr = new Uint8Array(buf);\n\n\tlet bits = 0;\n\tlet value = 0;\n\tlet index = 0;\n\n\tfor (let i = 0; i < strUpp.length; i++) {\n\t\tconst idx = Utils.b32.alphabet.indexOf(strUpp[i]);\n\n\t\tif (idx === -1) {\n\t\t\tthrow new TypeError(`Invalid character found: ${strUpp[i]}`);\n\t\t}\n\n\t\tvalue = (value << 5) | idx;\n\t\tbits += 5;\n\n\t\tif (bits >= 8) {\n\t\t\tarr[index++] = (value >>> bits - 8) & 255;\n\t\t\tbits -= 8;\n\t\t}\n\t}\n\n\treturn buf;\n};\n\n/**\n * Hexadecimal string conversion.\n * @memberof Utils\n * @namespace Utils.hex\n * @type {Object}\n */\nUtils.hex = {};\n\n/**\n * Converts an ArrayBuffer to a hexadecimal string.\n * @memberof Utils.hex\n * @method decode\n * @param {ArrayBuffer} buf ArrayBuffer.\n * @returns {string} Hexadecimal string.\n */\nUtils.hex.decode = buf => {\n\tconst arr = new Uint8Array(buf);\n\tlet str = '';\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tconst hexByte = arr[i].toString(16);\n\n\t\tstr += hexByte.length === 1\n\t\t\t? `0${hexByte}`\n\t\t\t: hexByte;\n\t}\n\n\treturn str.toUpperCase();\n};\n\n/**\n * Converts a hexadecimal string to an ArrayBuffer.\n * @memberof Utils.hex\n * @method encode\n * @param {string} str Hexadecimal string.\n * @returns {ArrayBuffer} ArrayBuffer.\n */\nUtils.hex.encode = str => {\n\tconst buf = new ArrayBuffer(str.length / 2);\n\tconst arr = new Uint8Array(buf);\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tarr[i] = parseInt(str.substr(i * 2, 2), 16);\n\t}\n\n\treturn buf;\n};\n\n/**\n * Pads a number with leading zeros.\n * @memberof Utils\n * @method pad\n * @param {number|string} num Number.\n * @param {number} digits Digits.\n * @returns {string} Padded number.\n */\nUtils.pad = (num, digits) => {\n\tlet prefix = '';\n\tlet repeat = digits - String(num).length;\n\twhile (repeat-- > 0) prefix += '0';\n\treturn `${prefix}${num}`;\n};\n\n/**\n * An object containing some utilities (for internal use only).\n * @private\n * @namespace InternalUtils\n * @type {Object}\n */\nexport const InternalUtils = {};\n\n/**\n * \"globalThis\" ponyfill.\n * @see https://mathiasbynens.be/notes/globalthis\n * @memberof InternalUtils\n * @type {Object}\n */\nInternalUtils.globalThis = (function getGlobalThis() {\n\t/* eslint-disable no-extend-native, no-undef */\n\tif (typeof globalThis === 'object') return globalThis;\n\tObject.defineProperty(Object.prototype, '__gt__', { get() { return this; }, configurable: true });\n\ttry { return __gt__; } finally { delete Object.prototype.__gt__; }\n\t/* eslint-enable */\n})();\n\n/**\n * \"console\" ponyfill.\n * (NOTICE: only some methods are implemented).\n * @memberof InternalUtils\n * @type {Object}\n */\nInternalUtils.console = typeof InternalUtils.globalThis.console !== 'object'\n\t? ['log', 'info', 'error', 'warn'].reduce((c, n) => { c[n] = () => {}; return c; }, {})\n\t: InternalUtils.globalThis.console;\n\n/**\n * Detect if running in \"Node.js\".\n * @memberof InternalUtils\n * @type {boolean}\n */\nInternalUtils.isNode = Object.prototype.toString.call(InternalUtils.globalThis.process) === '[object process]';\n\n/**\n * Dynamically import \"Node.js\" modules.\n * @memberof InternalUtils\n * @method require\n * @param {string} name Name.\n * @returns {Object} Module.\n */\n// eslint-disable-next-line no-eval\nInternalUtils.require = name => eval('require')(name);\n","/** @fileOverview Javascript cryptography implementation.\n *\n * Crush to remove comments, shorten variable names and\n * generally reduce transmission size.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n\"use strict\";\n/*jslint indent: 2, bitwise: false, nomen: false, plusplus: false, white: false, regexp: false */\n/*global document, window, escape, unescape, module, require, Uint32Array */\n\n/**\n * The Stanford Javascript Crypto Library, top-level namespace.\n * @namespace\n */\nvar sjcl = {\n  /**\n   * Symmetric ciphers.\n   * @namespace\n   */\n  cipher: {},\n\n  /**\n   * Hash functions.  Right now only SHA256 is implemented.\n   * @namespace\n   */\n  hash: {},\n\n  /**\n   * Key exchange functions.  Right now only SRP is implemented.\n   * @namespace\n   */\n  keyexchange: {},\n  \n  /**\n   * Cipher modes of operation.\n   * @namespace\n   */\n  mode: {},\n\n  /**\n   * Miscellaneous.  HMAC and PBKDF2.\n   * @namespace\n   */\n  misc: {},\n  \n  /**\n   * Bit array encoders and decoders.\n   * @namespace\n   *\n   * @description\n   * The members of this namespace are functions which translate between\n   * SJCL's bitArrays and other objects (usually strings).  Because it\n   * isn't always clear which direction is encoding and which is decoding,\n   * the method names are \"fromBits\" and \"toBits\".\n   */\n  codec: {},\n  \n  /**\n   * Exceptions.\n   * @namespace\n   */\n  exception: {\n    /**\n     * Ciphertext is corrupt.\n     * @constructor\n     */\n    corrupt: function(message) {\n      this.toString = function() { return \"CORRUPT: \"+this.message; };\n      this.message = message;\n    },\n    \n    /**\n     * Invalid parameter.\n     * @constructor\n     */\n    invalid: function(message) {\n      this.toString = function() { return \"INVALID: \"+this.message; };\n      this.message = message;\n    },\n    \n    /**\n     * Bug or missing feature in SJCL.\n     * @constructor\n     */\n    bug: function(message) {\n      this.toString = function() { return \"BUG: \"+this.message; };\n      this.message = message;\n    },\n\n    /**\n     * Something isn't ready.\n     * @constructor\n     */\n    notReady: function(message) {\n      this.toString = function() { return \"NOT READY: \"+this.message; };\n      this.message = message;\n    }\n  }\n};\n/** @fileOverview Arrays of bits, encoded as arrays of Numbers.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * Arrays of bits, encoded as arrays of Numbers.\n * @namespace\n * @description\n * <p>\n * These objects are the currency accepted by SJCL's crypto functions.\n * </p>\n *\n * <p>\n * Most of our crypto primitives operate on arrays of 4-byte words internally,\n * but many of them can take arguments that are not a multiple of 4 bytes.\n * This library encodes arrays of bits (whose size need not be a multiple of 8\n * bits) as arrays of 32-bit words.  The bits are packed, big-endian, into an\n * array of words, 32 bits at a time.  Since the words are double-precision\n * floating point numbers, they fit some extra data.  We use this (in a private,\n * possibly-changing manner) to encode the number of bits actually  present\n * in the last word of the array.\n * </p>\n *\n * <p>\n * Because bitwise ops clear this out-of-band data, these arrays can be passed\n * to ciphers like AES which want arrays of words.\n * </p>\n */\nsjcl.bitArray = {\n  /**\n   * Array slices in units of bits.\n   * @param {bitArray} a The array to slice.\n   * @param {Number} bstart The offset to the start of the slice, in bits.\n   * @param {Number} bend The offset to the end of the slice, in bits.  If this is undefined,\n   * slice until the end of the array.\n   * @return {bitArray} The requested slice.\n   */\n  bitSlice: function (a, bstart, bend) {\n    a = sjcl.bitArray._shiftRight(a.slice(bstart/32), 32 - (bstart & 31)).slice(1);\n    return (bend === undefined) ? a : sjcl.bitArray.clamp(a, bend-bstart);\n  },\n\n  /**\n   * Extract a number packed into a bit array.\n   * @param {bitArray} a The array to slice.\n   * @param {Number} bstart The offset to the start of the slice, in bits.\n   * @param {Number} blength The length of the number to extract.\n   * @return {Number} The requested slice.\n   */\n  extract: function(a, bstart, blength) {\n    // FIXME: this Math.floor is not necessary at all, but for some reason\n    // seems to suppress a bug in the Chromium JIT.\n    var x, sh = Math.floor((-bstart-blength) & 31);\n    if ((bstart + blength - 1 ^ bstart) & -32) {\n      // it crosses a boundary\n      x = (a[bstart/32|0] << (32 - sh)) ^ (a[bstart/32+1|0] >>> sh);\n    } else {\n      // within a single word\n      x = a[bstart/32|0] >>> sh;\n    }\n    return x & ((1<<blength) - 1);\n  },\n\n  /**\n   * Concatenate two bit arrays.\n   * @param {bitArray} a1 The first array.\n   * @param {bitArray} a2 The second array.\n   * @return {bitArray} The concatenation of a1 and a2.\n   */\n  concat: function (a1, a2) {\n    if (a1.length === 0 || a2.length === 0) {\n      return a1.concat(a2);\n    }\n    \n    var last = a1[a1.length-1], shift = sjcl.bitArray.getPartial(last);\n    if (shift === 32) {\n      return a1.concat(a2);\n    } else {\n      return sjcl.bitArray._shiftRight(a2, shift, last|0, a1.slice(0,a1.length-1));\n    }\n  },\n\n  /**\n   * Find the length of an array of bits.\n   * @param {bitArray} a The array.\n   * @return {Number} The length of a, in bits.\n   */\n  bitLength: function (a) {\n    var l = a.length, x;\n    if (l === 0) { return 0; }\n    x = a[l - 1];\n    return (l-1) * 32 + sjcl.bitArray.getPartial(x);\n  },\n\n  /**\n   * Truncate an array.\n   * @param {bitArray} a The array.\n   * @param {Number} len The length to truncate to, in bits.\n   * @return {bitArray} A new array, truncated to len bits.\n   */\n  clamp: function (a, len) {\n    if (a.length * 32 < len) { return a; }\n    a = a.slice(0, Math.ceil(len / 32));\n    var l = a.length;\n    len = len & 31;\n    if (l > 0 && len) {\n      a[l-1] = sjcl.bitArray.partial(len, a[l-1] & 0x80000000 >> (len-1), 1);\n    }\n    return a;\n  },\n\n  /**\n   * Make a partial word for a bit array.\n   * @param {Number} len The number of bits in the word.\n   * @param {Number} x The bits.\n   * @param {Number} [_end=0] Pass 1 if x has already been shifted to the high side.\n   * @return {Number} The partial word.\n   */\n  partial: function (len, x, _end) {\n    if (len === 32) { return x; }\n    return (_end ? x|0 : x << (32-len)) + len * 0x10000000000;\n  },\n\n  /**\n   * Get the number of bits used by a partial word.\n   * @param {Number} x The partial word.\n   * @return {Number} The number of bits used by the partial word.\n   */\n  getPartial: function (x) {\n    return Math.round(x/0x10000000000) || 32;\n  },\n\n  /**\n   * Compare two arrays for equality in a predictable amount of time.\n   * @param {bitArray} a The first array.\n   * @param {bitArray} b The second array.\n   * @return {boolean} true if a == b; false otherwise.\n   */\n  equal: function (a, b) {\n    if (sjcl.bitArray.bitLength(a) !== sjcl.bitArray.bitLength(b)) {\n      return false;\n    }\n    var x = 0, i;\n    for (i=0; i<a.length; i++) {\n      x |= a[i]^b[i];\n    }\n    return (x === 0);\n  },\n\n  /** Shift an array right.\n   * @param {bitArray} a The array to shift.\n   * @param {Number} shift The number of bits to shift.\n   * @param {Number} [carry=0] A byte to carry in\n   * @param {bitArray} [out=[]] An array to prepend to the output.\n   * @private\n   */\n  _shiftRight: function (a, shift, carry, out) {\n    var i, last2=0, shift2;\n    if (out === undefined) { out = []; }\n    \n    for (; shift >= 32; shift -= 32) {\n      out.push(carry);\n      carry = 0;\n    }\n    if (shift === 0) {\n      return out.concat(a);\n    }\n    \n    for (i=0; i<a.length; i++) {\n      out.push(carry | a[i]>>>shift);\n      carry = a[i] << (32-shift);\n    }\n    last2 = a.length ? a[a.length-1] : 0;\n    shift2 = sjcl.bitArray.getPartial(last2);\n    out.push(sjcl.bitArray.partial(shift+shift2 & 31, (shift + shift2 > 32) ? carry : out.pop(),1));\n    return out;\n  },\n  \n  /** xor a block of 4 words together.\n   * @private\n   */\n  _xor4: function(x,y) {\n    return [x[0]^y[0],x[1]^y[1],x[2]^y[2],x[3]^y[3]];\n  },\n\n  /** byteswap a word array inplace.\n   * (does not handle partial words)\n   * @param {sjcl.bitArray} a word array\n   * @return {sjcl.bitArray} byteswapped array\n   */\n  byteswapM: function(a) {\n    var i, v, m = 0xff00;\n    for (i = 0; i < a.length; ++i) {\n      v = a[i];\n      a[i] = (v >>> 24) | ((v >>> 8) & m) | ((v & m) << 8) | (v << 24);\n    }\n    return a;\n  }\n};\n/** @fileOverview Bit array codec implementations.\n *\n * @author Marco Munizaga\n */\n\n//patch arraybuffers if they don't exist\nif (typeof(ArrayBuffer) === 'undefined') {\n  (function(globals){\n      \"use strict\";\n      globals.ArrayBuffer = function(){};\n      globals.DataView = function(){};\n  }(this));\n}\n\n/**\n * ArrayBuffer\n * @namespace\n */\nsjcl.codec.arrayBuffer = {\n  /** Convert from a bitArray to an ArrayBuffer. \n   * Will default to 8byte padding if padding is undefined*/\n  fromBits: function (arr, padding, padding_count) {\n    var out, i, ol, tmp, smallest;\n    padding = padding==undefined  ? true : padding;\n    padding_count = padding_count || 8;\n\n    if (arr.length === 0) {\n      return new ArrayBuffer(0);\n    }\n\n    ol = sjcl.bitArray.bitLength(arr)/8;\n\n    //check to make sure the bitLength is divisible by 8, if it isn't \n    //we can't do anything since arraybuffers work with bytes, not bits\n    if ( sjcl.bitArray.bitLength(arr)%8 !== 0 ) {\n      throw new sjcl.exception.invalid(\"Invalid bit size, must be divisble by 8 to fit in an arraybuffer correctly\");\n    }\n\n    if (padding && ol%padding_count !== 0){\n      ol += padding_count - (ol%padding_count);\n    }\n\n\n    //padded temp for easy copying\n    tmp = new DataView(new ArrayBuffer(arr.length*4));\n    for (i=0; i<arr.length; i++) {\n      tmp.setUint32(i*4, (arr[i]<<32)); //get rid of the higher bits\n    }\n\n    //now copy the final message if we are not going to 0 pad\n    out = new DataView(new ArrayBuffer(ol));\n\n    //save a step when the tmp and out bytelength are ===\n    if (out.byteLength === tmp.byteLength){\n      return tmp.buffer;\n    }\n\n    smallest = tmp.byteLength < out.byteLength ? tmp.byteLength : out.byteLength;\n    for(i=0; i<smallest; i++){\n      out.setUint8(i,tmp.getUint8(i));\n    }\n\n\n    return out.buffer;\n  },\n  /** Convert from an ArrayBuffer to a bitArray. */\n  toBits: function (buffer) {\n    var i, out=[], len, inView, tmp;\n\n    if (buffer.byteLength === 0) {\n      return [];\n    }\n\n    inView = new DataView(buffer);\n    len = inView.byteLength - inView.byteLength%4;\n\n    for (var i = 0; i < len; i+=4) {\n      out.push(inView.getUint32(i));\n    }\n\n    if (inView.byteLength%4 != 0) {\n      tmp = new DataView(new ArrayBuffer(4));\n      for (var i = 0, l = inView.byteLength%4; i < l; i++) {\n        //we want the data to the right, because partial slices off the starting bits\n        tmp.setUint8(i+4-l, inView.getUint8(len+i)); // big-endian, \n      }\n      out.push(\n        sjcl.bitArray.partial( (inView.byteLength%4)*8, tmp.getUint32(0) )\n      ); \n    }\n    return out;\n  },\n\n\n\n  /** Prints a hex output of the buffer contents, akin to hexdump **/\n  hexDumpBuffer: function(buffer){\n      var stringBufferView = new DataView(buffer);\n      var string = '';\n      var pad = function (n, width) {\n          n = n + '';\n          return n.length >= width ? n : new Array(width - n.length + 1).join('0') + n;\n      };\n\n      for (var i = 0; i < stringBufferView.byteLength; i+=2) {\n          if (i%16 == 0) string += ('\\n'+(i).toString(16)+'\\t');\n          string += ( pad(stringBufferView.getUint16(i).toString(16),4) + ' ');\n      }\n\n      if ( typeof console === undefined ){\n        console = console || {log:function(){}}; //fix for IE\n      }\n      console.log(string.toUpperCase());\n  }\n};\n\n/** @fileOverview Javascript SHA-1 implementation.\n *\n * Based on the implementation in RFC 3174, method 1, and on the SJCL\n * SHA-256 implementation.\n *\n * @author Quinn Slack\n */\n\n/**\n * Context for a SHA-1 operation in progress.\n * @constructor\n */\nsjcl.hash.sha1 = function (hash) {\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 5 big-endian words.\n */\nsjcl.hash.sha1.hash = function (data) {\n  return (new sjcl.hash.sha1()).update(data).finalize();\n};\n\nsjcl.hash.sha1.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 512,\n   \n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n  \n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    if (nl > 9007199254740991){\n      throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    if (typeof Uint32Array !== 'undefined') {\n\tvar c = new Uint32Array(b);\n    \tvar j = 0;\n    \tfor (i = this.blockSize+ol - ((this.blockSize+ol) & (this.blockSize-1)); i <= nl;\n\t\ti+= this.blockSize) {\n      \t    this._block(c.subarray(16 * j, 16 * (j+1)));\n      \t    j += 1;\n    \t}\n    \tb.splice(0, 16 * j);\n    } else {\n    \tfor (i = this.blockSize+ol - ((this.blockSize+ol) & (this.blockSize-1)); i <= nl;\n             i+= this.blockSize) {\n      \t     this._block(b.splice(0,16));\n      \t}\n    }\n    return this;\n  },\n  \n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 5 big-endian words. TODO\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n    // Round out the buffer to a multiple of 16 words, less the 2 length words.\n    for (i = b.length + 2; i & 15; i++) {\n      b.push(0);\n    }\n\n    // append the length\n    b.push(Math.floor(this._length / 0x100000000));\n    b.push(this._length | 0);\n\n    while (b.length) {\n      this._block(b.splice(0,16));\n    }\n\n    this.reset();\n    return h;\n  },\n\n  /**\n   * The SHA-1 initialization vector.\n   * @private\n   */\n  _init:[0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0],\n\n  /**\n   * The SHA-1 hash key.\n   * @private\n   */\n  _key:[0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6],\n\n  /**\n   * The SHA-1 logical functions f(0), f(1), ..., f(79).\n   * @private\n   */\n  _f:function(t, b, c, d) {\n    if (t <= 19) {\n      return (b & c) | (~b & d);\n    } else if (t <= 39) {\n      return b ^ c ^ d;\n    } else if (t <= 59) {\n      return (b & c) | (b & d) | (c & d);\n    } else if (t <= 79) {\n      return b ^ c ^ d;\n    }\n  },\n\n  /**\n   * Circular left-shift operator.\n   * @private\n   */\n  _S:function(n, x) {\n    return (x << n) | (x >>> 32-n);\n  },\n  \n  /**\n   * Perform one cycle of SHA-1.\n   * @param {Uint32Array|bitArray} words one block of words.\n   * @private\n   */\n  _block:function (words) {\n    var t, tmp, a, b, c, d, e,\n    h = this._h;\n    var w;\n    if (typeof Uint32Array !== 'undefined') {\n        // When words is passed to _block, it has 16 elements. SHA1 _block\n        // function extends words with new elements (at the end there are 80 elements). \n        // The problem is that if we use Uint32Array instead of Array, \n        // the length of Uint32Array cannot be changed. Thus, we replace words with a \n        // normal Array here.\n        w = Array(80); // do not use Uint32Array here as the instantiation is slower\n        for (var j=0; j<16; j++){\n            w[j] = words[j];\n        }\n    } else {\n        w = words;\n    }\n\n    a = h[0]; b = h[1]; c = h[2]; d = h[3]; e = h[4]; \n\n    for (t=0; t<=79; t++) {\n      if (t >= 16) {\n        w[t] = this._S(1, w[t-3] ^ w[t-8] ^ w[t-14] ^ w[t-16]);\n      }\n      tmp = (this._S(5, a) + this._f(t, b, c, d) + e + w[t] +\n             this._key[Math.floor(t/20)]) | 0;\n      e = d;\n      d = c;\n      c = this._S(30, b);\n      b = a;\n      a = tmp;\n   }\n\n   h[0] = (h[0]+a) |0;\n   h[1] = (h[1]+b) |0;\n   h[2] = (h[2]+c) |0;\n   h[3] = (h[3]+d) |0;\n   h[4] = (h[4]+e) |0;\n  }\n};\n/** @fileOverview Javascript SHA-256 implementation.\n *\n * An older version of this implementation is available in the public\n * domain, but this one is (c) Emily Stark, Mike Hamburg, Dan Boneh,\n * Stanford University 2008-2010 and BSD-licensed for liability\n * reasons.\n *\n * Special thanks to Aldo Cortesi for pointing out several bugs in\n * this code.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * Context for a SHA-256 operation in progress.\n * @constructor\n */\nsjcl.hash.sha256 = function (hash) {\n  if (!this._key[0]) { this._precompute(); }\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 16 big-endian words.\n */\nsjcl.hash.sha256.hash = function (data) {\n  return (new sjcl.hash.sha256()).update(data).finalize();\n};\n\nsjcl.hash.sha256.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 512,\n   \n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n  \n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    if (nl > 9007199254740991){\n      throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    if (typeof Uint32Array !== 'undefined') {\n\tvar c = new Uint32Array(b);\n    \tvar j = 0;\n    \tfor (i = 512+ol - ((512+ol) & 511); i <= nl; i+= 512) {\n      \t    this._block(c.subarray(16 * j, 16 * (j+1)));\n      \t    j += 1;\n    \t}\n    \tb.splice(0, 16 * j);\n    } else {\n\tfor (i = 512+ol - ((512+ol) & 511); i <= nl; i+= 512) {\n      \t    this._block(b.splice(0,16));\n      \t}\n    }\n    return this;\n  },\n  \n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 8 big-endian words.\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n    \n    // Round out the buffer to a multiple of 16 words, less the 2 length words.\n    for (i = b.length + 2; i & 15; i++) {\n      b.push(0);\n    }\n    \n    // append the length\n    b.push(Math.floor(this._length / 0x100000000));\n    b.push(this._length | 0);\n\n    while (b.length) {\n      this._block(b.splice(0,16));\n    }\n\n    this.reset();\n    return h;\n  },\n\n  /**\n   * The SHA-256 initialization vector, to be precomputed.\n   * @private\n   */\n  _init:[],\n  /*\n  _init:[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19],\n  */\n  \n  /**\n   * The SHA-256 hash key, to be precomputed.\n   * @private\n   */\n  _key:[],\n  /*\n  _key:\n    [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n     0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n     0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n     0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n     0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n     0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n     0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n     0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2],\n  */\n\n\n  /**\n   * Function to precompute _init and _key.\n   * @private\n   */\n  _precompute: function () {\n    var i = 0, prime = 2, factor, isPrime;\n\n    function frac(x) { return (x-Math.floor(x)) * 0x100000000 | 0; }\n\n    for (; i<64; prime++) {\n      isPrime = true;\n      for (factor=2; factor*factor <= prime; factor++) {\n        if (prime % factor === 0) {\n          isPrime = false;\n          break;\n        }\n      }\n      if (isPrime) {\n        if (i<8) {\n          this._init[i] = frac(Math.pow(prime, 1/2));\n        }\n        this._key[i] = frac(Math.pow(prime, 1/3));\n        i++;\n      }\n    }\n  },\n  \n  /**\n   * Perform one cycle of SHA-256.\n   * @param {Uint32Array|bitArray} w one block of words.\n   * @private\n   */\n  _block:function (w) {  \n    var i, tmp, a, b,\n      h = this._h,\n      k = this._key,\n      h0 = h[0], h1 = h[1], h2 = h[2], h3 = h[3],\n      h4 = h[4], h5 = h[5], h6 = h[6], h7 = h[7];\n\n    /* Rationale for placement of |0 :\n     * If a value can overflow is original 32 bits by a factor of more than a few\n     * million (2^23 ish), there is a possibility that it might overflow the\n     * 53-bit mantissa and lose precision.\n     *\n     * To avoid this, we clamp back to 32 bits by |'ing with 0 on any value that\n     * propagates around the loop, and on the hash state h[].  I don't believe\n     * that the clamps on h4 and on h0 are strictly necessary, but it's close\n     * (for h4 anyway), and better safe than sorry.\n     *\n     * The clamps on h[] are necessary for the output to be correct even in the\n     * common case and for short inputs.\n     */\n    for (i=0; i<64; i++) {\n      // load up the input word for this round\n      if (i<16) {\n        tmp = w[i];\n      } else {\n        a   = w[(i+1 ) & 15];\n        b   = w[(i+14) & 15];\n        tmp = w[i&15] = ((a>>>7  ^ a>>>18 ^ a>>>3  ^ a<<25 ^ a<<14) + \n                         (b>>>17 ^ b>>>19 ^ b>>>10 ^ b<<15 ^ b<<13) +\n                         w[i&15] + w[(i+9) & 15]) | 0;\n      }\n      \n      tmp = (tmp + h7 + (h4>>>6 ^ h4>>>11 ^ h4>>>25 ^ h4<<26 ^ h4<<21 ^ h4<<7) +  (h6 ^ h4&(h5^h6)) + k[i]); // | 0;\n      \n      // shift register\n      h7 = h6; h6 = h5; h5 = h4;\n      h4 = h3 + tmp | 0;\n      h3 = h2; h2 = h1; h1 = h0;\n\n      h0 = (tmp +  ((h1&h2) ^ (h3&(h1^h2))) + (h1>>>2 ^ h1>>>13 ^ h1>>>22 ^ h1<<30 ^ h1<<19 ^ h1<<10)) | 0;\n    }\n\n    h[0] = h[0]+h0 | 0;\n    h[1] = h[1]+h1 | 0;\n    h[2] = h[2]+h2 | 0;\n    h[3] = h[3]+h3 | 0;\n    h[4] = h[4]+h4 | 0;\n    h[5] = h[5]+h5 | 0;\n    h[6] = h[6]+h6 | 0;\n    h[7] = h[7]+h7 | 0;\n  }\n};\n\n\n/** @fileOverview Javascript SHA-512 implementation.\n *\n * This implementation was written for CryptoJS by Jeff Mott and adapted for\n * SJCL by Stefan Thomas.\n *\n * CryptoJS (c) 2009–2012 by Jeff Mott. All rights reserved.\n * Released with New BSD License\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n * @author Jeff Mott\n * @author Stefan Thomas\n */\n\n/**\n * Context for a SHA-512 operation in progress.\n * @constructor\n */\nsjcl.hash.sha512 = function (hash) {\n  if (!this._key[0]) { this._precompute(); }\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 16 big-endian words.\n */\nsjcl.hash.sha512.hash = function (data) {\n  return (new sjcl.hash.sha512()).update(data).finalize();\n};\n\nsjcl.hash.sha512.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 1024,\n   \n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n  \n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    if (nl > 9007199254740991){\n      throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    if (typeof Uint32Array !== 'undefined') {\n        var c = new Uint32Array(b);\n        var j = 0;\n        for (i = 1024+ol - ((1024+ol) & 1023); i <= nl; i+= 1024) {\n            this._block(c.subarray(32 * j, 32 * (j+1)));\n            j += 1;\n        }\n        b.splice(0, 32 * j);\n    } else {\n        for (i = 1024+ol - ((1024+ol) & 1023); i <= nl; i+= 1024) {\n            this._block(b.splice(0,32));\n        }\n    }\n    return this;\n  },\n  \n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 16 big-endian words.\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n\n    // Round out the buffer to a multiple of 32 words, less the 4 length words.\n    for (i = b.length + 4; i & 31; i++) {\n      b.push(0);\n    }\n\n    // append the length\n    b.push(0);\n    b.push(0);\n    b.push(Math.floor(this._length / 0x100000000));\n    b.push(this._length | 0);\n\n    while (b.length) {\n      this._block(b.splice(0,32));\n    }\n\n    this.reset();\n    return h;\n  },\n\n  /**\n   * The SHA-512 initialization vector, to be precomputed.\n   * @private\n   */\n  _init:[],\n\n  /**\n   * Least significant 24 bits of SHA512 initialization values.\n   *\n   * Javascript only has 53 bits of precision, so we compute the 40 most\n   * significant bits and add the remaining 24 bits as constants.\n   *\n   * @private\n   */\n  _initr: [ 0xbcc908, 0xcaa73b, 0x94f82b, 0x1d36f1, 0xe682d1, 0x3e6c1f, 0x41bd6b, 0x7e2179 ],\n\n  /*\n  _init:\n  [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n   0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179],\n  */\n\n  /**\n   * The SHA-512 hash key, to be precomputed.\n   * @private\n   */\n  _key:[],\n\n  /**\n   * Least significant 24 bits of SHA512 key values.\n   * @private\n   */\n  _keyr:\n  [0x28ae22, 0xef65cd, 0x4d3b2f, 0x89dbbc, 0x48b538, 0x05d019, 0x194f9b, 0x6d8118,\n   0x030242, 0x706fbe, 0xe4b28c, 0xffb4e2, 0x7b896f, 0x1696b1, 0xc71235, 0x692694,\n   0xf14ad2, 0x4f25e3, 0x8cd5b5, 0xac9c65, 0x2b0275, 0xa6e483, 0x41fbd4, 0x1153b5,\n   0x66dfab, 0xb43210, 0xfb213f, 0xef0ee4, 0xa88fc2, 0x0aa725, 0x03826f, 0x0e6e70,\n   0xd22ffc, 0x26c926, 0xc42aed, 0x95b3df, 0xaf63de, 0x77b2a8, 0xedaee6, 0x82353b,\n   0xf10364, 0x423001, 0xf89791, 0x54be30, 0xef5218, 0x65a910, 0x71202a, 0xbbd1b8,\n   0xd2d0c8, 0x41ab53, 0x8eeb99, 0x9b48a8, 0xc95a63, 0x418acb, 0x63e373, 0xb2b8a3,\n   0xefb2fc, 0x172f60, 0xf0ab72, 0x6439ec, 0x631e28, 0x82bde9, 0xc67915, 0x72532b,\n   0x26619c, 0xc0c207, 0xe0eb1e, 0x6ed178, 0x176fba, 0xc898a6, 0xf90dae, 0x1c471b,\n   0x047d84, 0xc72493, 0xc9bebc, 0x100d4c, 0x3e42b6, 0x657e2a, 0xd6faec, 0x475817],\n\n  /*\n  _key:\n  [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n   0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n   0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n   0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n   0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n   0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n   0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n   0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n   0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n   0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n   0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n   0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n   0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n   0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n   0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n   0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n   0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n   0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n   0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n   0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817],\n  */\n\n  /**\n   * Function to precompute _init and _key.\n   * @private\n   */\n  _precompute: function () {\n    // XXX: This code is for precomputing the SHA256 constants, change for\n    //      SHA512 and re-enable.\n    var i = 0, prime = 2, factor , isPrime;\n\n    function frac(x)  { return (x-Math.floor(x)) * 0x100000000 | 0; }\n    function frac2(x) { return (x-Math.floor(x)) * 0x10000000000 & 0xff; }\n\n    for (; i<80; prime++) {\n      isPrime = true;\n      for (factor=2; factor*factor <= prime; factor++) {\n        if (prime % factor === 0) {\n          isPrime = false;\n          break;\n        }\n      }\n      if (isPrime) {\n        if (i<8) {\n          this._init[i*2] = frac(Math.pow(prime, 1/2));\n          this._init[i*2+1] = (frac2(Math.pow(prime, 1/2)) << 24) | this._initr[i];\n        }\n        this._key[i*2] = frac(Math.pow(prime, 1/3));\n        this._key[i*2+1] = (frac2(Math.pow(prime, 1/3)) << 24) | this._keyr[i];\n        i++;\n      }\n    }\n  },\n\n  /**\n   * Perform one cycle of SHA-512.\n   * @param {Uint32Array|bitArray} words one block of words.\n   * @private\n   */\n  _block:function (words) {\n    var i, wrh, wrl,\n        h = this._h,\n        k = this._key,\n        h0h = h[ 0], h0l = h[ 1], h1h = h[ 2], h1l = h[ 3],\n        h2h = h[ 4], h2l = h[ 5], h3h = h[ 6], h3l = h[ 7],\n        h4h = h[ 8], h4l = h[ 9], h5h = h[10], h5l = h[11],\n        h6h = h[12], h6l = h[13], h7h = h[14], h7l = h[15];\n    var w;\n    if (typeof Uint32Array !== 'undefined') {\n\t// When words is passed to _block, it has 32 elements. SHA512 _block\n\t// function extends words with new elements (at the end there are 160 elements). \n\t// The problem is that if we use Uint32Array instead of Array, \n\t// the length of Uint32Array cannot be changed. Thus, we replace words with a \n\t// normal Array here.\n        w = Array(160); // do not use Uint32Array here as the instantiation is slower\n        for (var j=0; j<32; j++){\n    \t    w[j] = words[j]; \n        }\n    } else {\n\tw = words;\n    } \n\n    // Working variables\n    var ah = h0h, al = h0l, bh = h1h, bl = h1l,\n        ch = h2h, cl = h2l, dh = h3h, dl = h3l,\n        eh = h4h, el = h4l, fh = h5h, fl = h5l,\n        gh = h6h, gl = h6l, hh = h7h, hl = h7l;\n\n    for (i=0; i<80; i++) {\n      // load up the input word for this round\n      if (i<16) {\n        wrh = w[i * 2];\n        wrl = w[i * 2 + 1];\n      } else {\n        // Gamma0\n        var gamma0xh = w[(i-15) * 2];\n        var gamma0xl = w[(i-15) * 2 + 1];\n        var gamma0h =\n          ((gamma0xl << 31) | (gamma0xh >>> 1)) ^\n          ((gamma0xl << 24) | (gamma0xh >>> 8)) ^\n           (gamma0xh >>> 7);\n        var gamma0l =\n          ((gamma0xh << 31) | (gamma0xl >>> 1)) ^\n          ((gamma0xh << 24) | (gamma0xl >>> 8)) ^\n          ((gamma0xh << 25) | (gamma0xl >>> 7));\n\n        // Gamma1\n        var gamma1xh = w[(i-2) * 2];\n        var gamma1xl = w[(i-2) * 2 + 1];\n        var gamma1h =\n          ((gamma1xl << 13) | (gamma1xh >>> 19)) ^\n          ((gamma1xh << 3)  | (gamma1xl >>> 29)) ^\n           (gamma1xh >>> 6);\n        var gamma1l =\n          ((gamma1xh << 13) | (gamma1xl >>> 19)) ^\n          ((gamma1xl << 3)  | (gamma1xh >>> 29)) ^\n          ((gamma1xh << 26) | (gamma1xl >>> 6));\n\n        // Shortcuts\n        var wr7h = w[(i-7) * 2];\n        var wr7l = w[(i-7) * 2 + 1];\n\n        var wr16h = w[(i-16) * 2];\n        var wr16l = w[(i-16) * 2 + 1];\n\n        // W(round) = gamma0 + W(round - 7) + gamma1 + W(round - 16)\n        wrl = gamma0l + wr7l;\n        wrh = gamma0h + wr7h + ((wrl >>> 0) < (gamma0l >>> 0) ? 1 : 0);\n        wrl += gamma1l;\n        wrh += gamma1h + ((wrl >>> 0) < (gamma1l >>> 0) ? 1 : 0);\n        wrl += wr16l;\n        wrh += wr16h + ((wrl >>> 0) < (wr16l >>> 0) ? 1 : 0);\n      }\n\n      w[i*2]     = wrh |= 0;\n      w[i*2 + 1] = wrl |= 0;\n\n      // Ch\n      var chh = (eh & fh) ^ (~eh & gh);\n      var chl = (el & fl) ^ (~el & gl);\n\n      // Maj\n      var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\n      var majl = (al & bl) ^ (al & cl) ^ (bl & cl);\n\n      // Sigma0\n      var sigma0h = ((al << 4) | (ah >>> 28)) ^ ((ah << 30) | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\n      var sigma0l = ((ah << 4) | (al >>> 28)) ^ ((al << 30) | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\n\n      // Sigma1\n      var sigma1h = ((el << 18) | (eh >>> 14)) ^ ((el << 14) | (eh >>> 18)) ^ ((eh << 23) | (el >>> 9));\n      var sigma1l = ((eh << 18) | (el >>> 14)) ^ ((eh << 14) | (el >>> 18)) ^ ((el << 23) | (eh >>> 9));\n\n      // K(round)\n      var krh = k[i*2];\n      var krl = k[i*2+1];\n\n      // t1 = h + sigma1 + ch + K(round) + W(round)\n      var t1l = hl + sigma1l;\n      var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\n      t1l += chl;\n      t1h += chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\n      t1l += krl;\n      t1h += krh + ((t1l >>> 0) < (krl >>> 0) ? 1 : 0);\n      t1l = t1l + wrl|0;   // FF32..FF34 perf issue https://bugzilla.mozilla.org/show_bug.cgi?id=1054972\n      t1h += wrh + ((t1l >>> 0) < (wrl >>> 0) ? 1 : 0);\n\n      // t2 = sigma0 + maj\n      var t2l = sigma0l + majl;\n      var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);\n\n      // Update working variables\n      hh = gh;\n      hl = gl;\n      gh = fh;\n      gl = fl;\n      fh = eh;\n      fl = el;\n      el = (dl + t1l) | 0;\n      eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\n      dh = ch;\n      dl = cl;\n      ch = bh;\n      cl = bl;\n      bh = ah;\n      bl = al;\n      al = (t1l + t2l) | 0;\n      ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\n    }\n\n    // Intermediate hash\n    h0l = h[1] = (h0l + al) | 0;\n    h[0] = (h0h + ah + ((h0l >>> 0) < (al >>> 0) ? 1 : 0)) | 0;\n    h1l = h[3] = (h1l + bl) | 0;\n    h[2] = (h1h + bh + ((h1l >>> 0) < (bl >>> 0) ? 1 : 0)) | 0;\n    h2l = h[5] = (h2l + cl) | 0;\n    h[4] = (h2h + ch + ((h2l >>> 0) < (cl >>> 0) ? 1 : 0)) | 0;\n    h3l = h[7] = (h3l + dl) | 0;\n    h[6] = (h3h + dh + ((h3l >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\n    h4l = h[9] = (h4l + el) | 0;\n    h[8] = (h4h + eh + ((h4l >>> 0) < (el >>> 0) ? 1 : 0)) | 0;\n    h5l = h[11] = (h5l + fl) | 0;\n    h[10] = (h5h + fh + ((h5l >>> 0) < (fl >>> 0) ? 1 : 0)) | 0;\n    h6l = h[13] = (h6l + gl) | 0;\n    h[12] = (h6h + gh + ((h6l >>> 0) < (gl >>> 0) ? 1 : 0)) | 0;\n    h7l = h[15] = (h7l + hl) | 0;\n    h[14] = (h7h + hh + ((h7l >>> 0) < (hl >>> 0) ? 1 : 0)) | 0;\n  }\n};\n\n\n/** @fileOverview HMAC implementation.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/** HMAC with the specified hash function.\n * @constructor\n * @param {bitArray} key the key for HMAC.\n * @param {Object} [Hash=sjcl.hash.sha256] The hash function to use.\n */\nsjcl.misc.hmac = function (key, Hash) {\n  this._hash = Hash = Hash || sjcl.hash.sha256;\n  var exKey = [[],[]], i,\n      bs = Hash.prototype.blockSize / 32;\n  this._baseHash = [new Hash(), new Hash()];\n\n  if (key.length > bs) {\n    key = Hash.hash(key);\n  }\n  \n  for (i=0; i<bs; i++) {\n    exKey[0][i] = key[i]^0x36363636;\n    exKey[1][i] = key[i]^0x5C5C5C5C;\n  }\n  \n  this._baseHash[0].update(exKey[0]);\n  this._baseHash[1].update(exKey[1]);\n  this._resultHash = new Hash(this._baseHash[0]);\n};\n\n/** HMAC with the specified hash function.  Also called encrypt since it's a prf.\n * @param {bitArray|String} data The data to mac.\n */\nsjcl.misc.hmac.prototype.encrypt = sjcl.misc.hmac.prototype.mac = function (data) {\n  if (!this._updated) {\n    this.update(data);\n    return this.digest(data);\n  } else {\n    throw new sjcl.exception.invalid(\"encrypt on already updated hmac called!\");\n  }\n};\n\nsjcl.misc.hmac.prototype.reset = function () {\n  this._resultHash = new this._hash(this._baseHash[0]);\n  this._updated = false;\n};\n\nsjcl.misc.hmac.prototype.update = function (data) {\n  this._updated = true;\n  this._resultHash.update(data);\n};\n\nsjcl.misc.hmac.prototype.digest = function () {\n  var w = this._resultHash.finalize(), result = new (this._hash)(this._baseHash[1]).update(w).finalize();\n\n  this.reset();\n\n  return result;\n};\n; export default sjcl;","// eslint-disable-next-line import/no-extraneous-dependencies\nimport sjcl from 'sjcl'; // SJCL is included during compilation.\n\nimport { InternalUtils } from './utils';\n\n/**\n * An object containing some cryptography functions\n * with dirty workarounds for Node.js and browsers.\n * @private\n * @namespace Crypto\n * @type {Object}\n */\nexport const Crypto = {};\n\n/**\n * Returns random bytes.\n * @memberof Crypto\n * @method randomBytes\n * @param {number} size Size.\n * @returns {ArrayBuffer} Random bytes.\n */\nCrypto.randomBytes = undefined;\n\n/**\n * Calculates an HMAC digest.\n * In Node.js, the command `openssl list -digest-algorithms` displays the available digest algorithms.\n * @memberof Crypto\n * @method hmacDigest\n * @param {string} algorithm Algorithm.\n * @param {ArrayBuffer} key Key.\n * @param {ArrayBuffer} message Message.\n * @returns {ArrayBuffer} Digest.\n */\nCrypto.hmacDigest = undefined;\n\nif (InternalUtils.isNode) {\n\tconst NodeBuffer = InternalUtils.globalThis.Buffer;\n\tconst NodeCrypto = InternalUtils.require('crypto');\n\n\tlet nodeBufferFromArrayBuffer;\n\tif (typeof NodeBuffer.from === 'function') {\n\t\tnodeBufferFromArrayBuffer = NodeBuffer.from;\n\t} else {\n\t\t// Node.js < 5.10.0\n\t\tnodeBufferFromArrayBuffer = arrayBuffer => {\n\t\t\tconst nodeBuffer = new NodeBuffer(arrayBuffer.byteLength);\n\t\t\tconst uint8Array = new Uint8Array(arrayBuffer);\n\t\t\tfor (let i = 0; i < uint8Array.length; i++) {\n\t\t\t\tnodeBuffer[i] = uint8Array[i];\n\t\t\t}\n\t\t\treturn nodeBuffer;\n\t\t};\n\t}\n\n\tlet nodeBufferToArrayBuffer;\n\tif (NodeBuffer.prototype instanceof Uint8Array) {\n\t\tnodeBufferToArrayBuffer = nodeBuffer => nodeBuffer.buffer;\n\t} else {\n\t\t// Node.js < 4.0.0\n\t\tnodeBufferToArrayBuffer = nodeBuffer => {\n\t\t\tconst uint8Array = new Uint8Array(nodeBuffer.length);\n\t\t\tfor (let i = 0; i < uint8Array.length; i++) {\n\t\t\t\tuint8Array[i] = nodeBuffer[i];\n\t\t\t}\n\t\t\treturn uint8Array.buffer;\n\t\t};\n\t}\n\n\tCrypto.randomBytes = size => {\n\t\tconst randomBytes = NodeCrypto.randomBytes(size);\n\t\treturn nodeBufferToArrayBuffer(randomBytes);\n\t};\n\n\tCrypto.hmacDigest = (algorithm, key, message) => {\n\t\tconst hmac = NodeCrypto.createHmac(algorithm, nodeBufferFromArrayBuffer(key));\n\t\thmac.update(nodeBufferFromArrayBuffer(message));\n\t\treturn nodeBufferToArrayBuffer(hmac.digest());\n\t};\n} else {\n\tconst BrowserCrypto = InternalUtils.globalThis.crypto || InternalUtils.globalThis.msCrypto;\n\n\tlet getRandomValues;\n\tif (typeof BrowserCrypto !== 'undefined' && typeof BrowserCrypto.getRandomValues === 'function') {\n\t\tgetRandomValues = array => {\n\t\t\tBrowserCrypto.getRandomValues(array);\n\t\t};\n\t} else {\n\t\tInternalUtils.console.warn('Cryptography API not available, falling back to \\'Math.random\\'...');\n\t\tgetRandomValues = array => {\n\t\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\t\tarray[i] = Math.floor(Math.random() * 256);\n\t\t\t}\n\t\t};\n\t}\n\n\tCrypto.randomBytes = size => {\n\t\tconst randomBytes = new Uint8Array(size);\n\t\tgetRandomValues(randomBytes);\n\t\treturn randomBytes.buffer;\n\t};\n\n\tCrypto.hmacDigest = (algorithm, key, message) => {\n\t\tconst hash = sjcl.hash[algorithm.toLowerCase()];\n\t\tif (typeof hash === 'undefined') {\n\t\t\tthrow new TypeError('Unknown hash function');\n\t\t}\n\t\t// eslint-disable-next-line new-cap\n\t\tconst hmac = new sjcl.misc.hmac(sjcl.codec.arrayBuffer.toBits(key), hash);\n\t\thmac.update(sjcl.codec.arrayBuffer.toBits(message));\n\t\treturn sjcl.codec.arrayBuffer.fromBits(hmac.digest(), false);\n\t};\n}\n","import { Utils } from './utils';\nimport { Crypto } from './crypto';\n\n/**\n * Secret key object.\n */\nexport class Secret {\n\t/**\n\t * @param {Object} [config] Configuration options.\n\t * @param {ArrayBuffer} [config.buffer=Crypto.randomBytes] Secret key.\n\t * @param {number} [config.size=20] Number of random bytes to generate, ignored if 'buffer' is provided.\n\t */\n\tconstructor({ buffer, size = 20 } = {}) {\n\t\t/**\n\t\t * Secret key.\n\t\t * @type {ArrayBuffer}\n\t\t */\n\t\tthis.buffer = typeof buffer === 'undefined'\n\t\t\t? Crypto.randomBytes(size)\n\t\t\t: buffer;\n\t}\n\n\t/**\n\t * Converts a raw string to a Secret object.\n\t * @param {string} str Raw string.\n\t * @returns {Secret} Secret object.\n\t */\n\tstatic fromRaw(str) {\n\t\treturn new Secret({ buffer: Utils.raw.encode(str) });\n\t}\n\n\t/**\n\t * Converts a base32 string to a Secret object.\n\t * @param {string} str Base32 string.\n\t * @returns {Secret} Secret object.\n\t */\n\tstatic fromB32(str) {\n\t\treturn new Secret({ buffer: Utils.b32.encode(str) });\n\t}\n\n\t/**\n\t * Converts a hexadecimal string to a Secret object.\n\t * @param {string} str Hexadecimal string.\n\t * @returns {Secret} Secret object.\n\t */\n\tstatic fromHex(str) {\n\t\treturn new Secret({ buffer: Utils.hex.encode(str) });\n\t}\n\n\t/**\n\t * String representation of secret key.\n\t * @type {string}\n\t */\n\tget raw() {\n\t\tObject.defineProperty(this, 'raw', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\twritable: true,\n\t\t\tvalue: Utils.raw.decode(this.buffer)\n\t\t});\n\n\t\treturn this.raw;\n\t}\n\n\t/**\n\t * Base32 representation of secret key.\n\t * @type {string}\n\t */\n\tget b32() {\n\t\tObject.defineProperty(this, 'b32', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\twritable: true,\n\t\t\tvalue: Utils.b32.decode(this.buffer)\n\t\t});\n\n\t\treturn this.b32;\n\t}\n\n\t/**\n\t * Hexadecimal representation of secret key.\n\t * @type {string}\n\t */\n\tget hex() {\n\t\tObject.defineProperty(this, 'hex', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\twritable: true,\n\t\t\tvalue: Utils.hex.decode(this.buffer)\n\t\t});\n\n\t\treturn this.hex;\n\t}\n}\n","import { Utils } from './utils';\nimport { Secret } from './secret';\n// eslint-disable-next-line import/no-cycle\nimport { HOTP, TOTP } from './otp';\n\n/**\n * Valid key URI parameters.\n * @private\n * @type {Array}\n */\nconst OTPURI_PARAMS = ['issuer', 'secret', 'algorithm', 'digits', 'counter', 'period'];\n\n/**\n * Key URI regex.\n *   otpauth://TYPE/[ISSUER:]LABEL?PARAMETERS\n * @private\n * @type {RegExp}\n */\nconst OTPURI_REGEX = new RegExp(`^otpauth:\\\\/\\\\/([ht]otp)\\\\/(.+)\\\\?((?:&?(?:${OTPURI_PARAMS.join('|')})=[^&]+)+)$`, 'i');\n\n/**\n * RFC 4648 base32 alphabet without pad.\n * @private\n * @type {string}\n */\nconst SECRET_REGEX = /^[2-7A-Z]+$/i;\n\n/**\n * Regex for supported algorithms.\n * @private\n * @type {RegExp}\n */\nconst ALGORITHM_REGEX = /^SHA(?:1|256|512)$/i;\n\n/**\n * Integer regex.\n * @private\n * @type {RegExp}\n */\nconst INTEGER_REGEX = /^[+-]?\\d+$/;\n\n/**\n * Positive integer regex.\n * @private\n * @type {RegExp}\n */\nconst POSITIVE_INTEGER_REGEX = /^\\+?[1-9]\\d*$/;\n\n/**\n * HOTP/TOTP object/string conversion.\n * @see https://github.com/google/google-authenticator/wiki/Key-Uri-Format\n */\nexport class URI {\n\t/**\n\t * Parses a Google Authenticator key URI and returns an HOTP/TOTP object.\n\t * @param {string} uri Google Authenticator Key URI.\n\t * @returns {HOTP|TOTP} HOTP/TOTP object.\n\t */\n\tstatic parse(uri) {\n\t\tlet uriGroups;\n\n\t\ttry {\n\t\t\turiGroups = uri.match(OTPURI_REGEX);\n\t\t} catch (error) { /* Handled below */ }\n\n\t\tif (!Array.isArray(uriGroups)) {\n\t\t\tthrow new URIError('Invalid URI format');\n\t\t}\n\n\t\t// Extract URI groups.\n\t\tconst uriType = uriGroups[1].toLowerCase();\n\t\tconst uriLabel = uriGroups[2].split(/:(.+)/, 2).map(decodeURIComponent);\n\t\tconst uriParams = uriGroups[3].split('&').reduce((acc, cur) => {\n\t\t\tconst pairArr = cur.split(/=(.+)/, 2).map(decodeURIComponent);\n\t\t\tconst pairKey = pairArr[0].toLowerCase();\n\t\t\tconst pairVal = pairArr[1];\n\t\t\tconst pairAcc = acc;\n\n\t\t\tpairAcc[pairKey] = pairVal;\n\t\t\treturn pairAcc;\n\t\t}, {});\n\n\t\t// 'OTP' will be instantiated with 'config' argument\n\t\tlet OTP;\n\t\tconst config = {};\n\n\t\tif (uriType === 'hotp') {\n\t\t\tOTP = HOTP;\n\n\t\t\t// Counter: required\n\t\t\tif (typeof uriParams.counter !== 'undefined' && INTEGER_REGEX.test(uriParams.counter)) {\n\t\t\t\tconfig.counter = parseInt(uriParams.counter, 10);\n\t\t\t} else {\n\t\t\t\tthrow new TypeError('Missing or invalid \\'counter\\' parameter');\n\t\t\t}\n\t\t} else if (uriType === 'totp') {\n\t\t\tOTP = TOTP;\n\n\t\t\t// Period: optional\n\t\t\tif (typeof uriParams.period !== 'undefined') {\n\t\t\t\tif (POSITIVE_INTEGER_REGEX.test(uriParams.period)) {\n\t\t\t\t\tconfig.period = parseInt(uriParams.period, 10);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError('Invalid \\'period\\' parameter');\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError('Unknown OTP type');\n\t\t}\n\n\t\t// Label: required\n\t\t// Issuer: optional\n\t\tif (uriLabel.length === 2) {\n\t\t\tconfig.label = uriLabel[1];\n\t\t\tif (typeof uriParams.issuer === 'undefined') {\n\t\t\t\tconfig.issuer = uriLabel[0];\n\t\t\t} else if (uriParams.issuer === uriLabel[0]) {\n\t\t\t\tconfig.issuer = uriParams.issuer;\n\t\t\t} else {\n\t\t\t\tthrow new TypeError('Invalid \\'issuer\\' parameter');\n\t\t\t}\n\t\t} else {\n\t\t\tconfig.label = uriLabel[0];\n\t\t\tif (typeof uriParams.issuer !== 'undefined') {\n\t\t\t\tconfig.issuer = uriParams.issuer;\n\t\t\t}\n\t\t}\n\n\t\t// Secret: required\n\t\tif (typeof uriParams.secret !== 'undefined' && SECRET_REGEX.test(uriParams.secret)) {\n\t\t\tconfig.secret = new Secret({ buffer: Utils.b32.encode(uriParams.secret) });\n\t\t} else {\n\t\t\tthrow new TypeError('Missing or invalid \\'secret\\' parameter');\n\t\t}\n\n\t\t// Algorithm: optional\n\t\tif (typeof uriParams.algorithm !== 'undefined') {\n\t\t\tif (ALGORITHM_REGEX.test(uriParams.algorithm)) {\n\t\t\t\tconfig.algorithm = uriParams.algorithm;\n\t\t\t} else {\n\t\t\t\tthrow new TypeError('Invalid \\'algorithm\\' parameter');\n\t\t\t}\n\t\t}\n\n\t\t// Digits: optional\n\t\tif (typeof uriParams.digits !== 'undefined') {\n\t\t\tif (POSITIVE_INTEGER_REGEX.test(uriParams.digits)) {\n\t\t\t\tconfig.digits = parseInt(uriParams.digits, 10);\n\t\t\t} else {\n\t\t\t\tthrow new TypeError('Invalid \\'digits\\' parameter');\n\t\t\t}\n\t\t}\n\n\t\treturn new OTP(config);\n\t}\n\n\t/**\n\t * Converts an HOTP/TOTP object to a Google Authenticator key URI.\n\t * @param {HOTP|TOTP} otp HOTP/TOTP object.\n\t * @param {Object} [config] Configuration options.\n\t * @param {boolean} [config.legacyIssuer=true] Set issuer label prefix.\n\t * @returns {string} Google Authenticator Key URI.\n\t */\n\tstatic stringify(otp, { legacyIssuer = true } = {}) {\n\t\tconst isHOTP = otp instanceof HOTP;\n\t\tconst isTOTP = otp instanceof TOTP;\n\n\t\tif (!isHOTP && !isTOTP) {\n\t\t\tthrow new TypeError('Invalid \\'HOTP/TOTP\\' object');\n\t\t}\n\n\t\t// Key URI format:\n\t\t// otpauth://TYPE/[ISSUER:]LABEL?PARAMETERS\n\t\tlet uri = 'otpauth://';\n\n\t\t// Type\n\t\turi += `${isTOTP ? 'totp' : 'hotp'}/`;\n\n\t\t// Label and optional issuer\n\t\tif (otp.issuer.length > 0) {\n\t\t\t// Legacy label prefix\n\t\t\tif (legacyIssuer) uri += `${encodeURIComponent(otp.issuer)}:`;\n\t\t\t// Label\n\t\t\turi += `${encodeURIComponent(otp.label)}?`;\n\t\t\t// Issuer\n\t\t\turi += `issuer=${encodeURIComponent(otp.issuer)}&`;\n\t\t} else {\n\t\t\t// Label\n\t\t\turi += `${encodeURIComponent(otp.label)}?`;\n\t\t}\n\n\t\t// Generic parameters\n\t\turi += `secret=${encodeURIComponent(otp.secret.b32)}`\n\t\t\t+ `&algorithm=${encodeURIComponent(otp.algorithm)}`\n\t\t\t+ `&digits=${encodeURIComponent(otp.digits)}`;\n\n\t\t// Extra parameters\n\t\tif (isTOTP) {\n\t\t\t// TOTP parameters\n\t\t\turi += `&period=${encodeURIComponent(otp.period)}`;\n\t\t} else {\n\t\t\t// HOTP parameters\n\t\t\turi += `&counter=${encodeURIComponent(otp.counter)}`;\n\t\t}\n\n\t\treturn uri;\n\t}\n}\n","import { Utils } from './utils';\nimport { Crypto } from './crypto';\nimport { Secret } from './secret';\n// eslint-disable-next-line import/no-cycle\nimport { URI } from './uri';\n\n/**\n * Default configuration.\n * @private\n * @type {Object}\n */\nconst defaults = {\n\tissuer: '',\n\tlabel: 'OTPAuth',\n\talgorithm: 'SHA1',\n\tdigits: 6,\n\tcounter: 0,\n\tperiod: 30,\n\twindow: 1\n};\n\n/**\n * HOTP: An HMAC-based One-time Password Algorithm (RFC 4226).\n * @see https://tools.ietf.org/html/rfc4226\n */\nexport class HOTP {\n\t/**\n\t * @param {Object} [config] Configuration options.\n\t * @param {string} [config.issuer=''] Account provider.\n\t * @param {string} [config.label='OTPAuth'] Account label.\n\t * @param {Secret|string} [config.secret=Secret] Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.counter=0] Initial counter value.\n\t */\n\tconstructor({\n\t\tissuer = defaults.issuer,\n\t\tlabel = defaults.label,\n\t\tsecret = new Secret(),\n\t\talgorithm = defaults.algorithm,\n\t\tdigits = defaults.digits,\n\t\tcounter = defaults.counter\n\t} = {}) {\n\t\t/**\n\t\t * Account provider.\n\t\t * @type {string}\n\t\t */\n\t\tthis.issuer = issuer;\n\t\t/**\n\t\t * Account label.\n\t\t * @type {string}\n\t\t */\n\t\tthis.label = label;\n\t\t/**\n\t\t * Secret key.\n\t\t * @type {Secret}\n\t\t */\n\t\tthis.secret = typeof secret === 'string'\n\t\t\t? Secret.fromB32(secret)\n\t\t\t: secret;\n\t\t/**\n\t\t * HMAC hashing algorithm.\n\t\t * @type {string}\n\t\t */\n\t\tthis.algorithm = algorithm;\n\t\t/**\n\t\t * Token length.\n\t\t * @type {number}\n\t\t */\n\t\tthis.digits = digits;\n\t\t/**\n\t\t * Initial counter value.\n\t\t * @type {number}\n\t\t */\n\t\tthis.counter = counter;\n\t}\n\n\t/**\n\t * Generates an HOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.counter=0] Counter value.\n\t * @returns {string} Token.\n\t */\n\tstatic generate({\n\t\tsecret,\n\t\talgorithm = defaults.algorithm,\n\t\tdigits = defaults.digits,\n\t\tcounter = defaults.counter\n\t}) {\n\t\tconst digest = new Uint8Array(Crypto.hmacDigest(algorithm, secret.buffer, Utils.uint.encode(counter)));\n\t\tconst offset = digest[digest.byteLength - 1] & 15;\n\t\tconst otp = (\n\t\t\t((digest[offset] & 127) << 24)\n\t\t\t| ((digest[offset + 1] & 255) << 16)\n\t\t\t| ((digest[offset + 2] & 255) << 8)\n\t\t\t| (digest[offset + 3] & 255)\n\t\t) % (10 ** digits);\n\n\t\treturn Utils.pad(otp, digits);\n\t}\n\n\t/**\n\t * Generates an HOTP token.\n\t * @param {Object} [config] Configuration options.\n\t * @param {number} [config.counter=this.counter++] Counter value.\n\t * @returns {string} Token.\n\t */\n\tgenerate({\n\t\tcounter = this.counter++\n\t} = {}) {\n\t\treturn HOTP.generate({\n\t\t\tsecret: this.secret,\n\t\t\talgorithm: this.algorithm,\n\t\t\tdigits: this.digits,\n\t\t\tcounter\n\t\t});\n\t}\n\n\t/**\n\t * Validates an HOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.counter=0] Counter value.\n\t * @param {number} [config.window=1] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tstatic validate({\n\t\ttoken,\n\t\tsecret,\n\t\talgorithm,\n\t\tcounter = defaults.counter,\n\t\twindow = defaults.window\n\t}) {\n\t\tfor (let i = counter - window; i <= counter + window; ++i) {\n\t\t\tconst generatedToken = HOTP.generate({\n\t\t\t\tsecret,\n\t\t\t\talgorithm,\n\t\t\t\tdigits: token.length,\n\t\t\t\tcounter: i\n\t\t\t});\n\n\t\t\tif (token === generatedToken) {\n\t\t\t\treturn i - counter;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Validates an HOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {number} [config.counter=this.counter] Counter value.\n\t * @param {number} [config.window=1] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tvalidate({\n\t\ttoken,\n\t\tcounter = this.counter,\n\t\twindow\n\t}) {\n\t\treturn HOTP.validate({\n\t\t\ttoken: Utils.pad(token, this.digits),\n\t\t\tsecret: this.secret,\n\t\t\talgorithm: this.algorithm,\n\t\t\tcounter,\n\t\t\twindow\n\t\t});\n\t}\n\n\t/**\n\t * Returns a Google Authenticator key URI.\n\t * @returns {string} URI.\n\t */\n\ttoString() {\n\t\treturn URI.stringify(this);\n\t}\n}\n\n/**\n * TOTP: Time-Based One-Time Password Algorithm (RFC 6238).\n * @see https://tools.ietf.org/html/rfc6238\n */\nexport class TOTP {\n\t/**\n\t * @param {Object} [config] Configuration options.\n\t * @param {string} [config.issuer=''] Account provider.\n\t * @param {string} [config.label='OTPAuth'] Account label.\n\t * @param {Secret|string} [config.secret=Secret] Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.period=30] Token time-step duration.\n\t */\n\tconstructor({\n\t\tissuer = defaults.issuer,\n\t\tlabel = defaults.label,\n\t\tsecret = new Secret(),\n\t\talgorithm = defaults.algorithm,\n\t\tdigits = defaults.digits,\n\t\tperiod = defaults.period\n\t} = {}) {\n\t\t/**\n\t\t * Account provider.\n\t\t * @type {string}\n\t\t */\n\t\tthis.issuer = issuer;\n\t\t/**\n\t\t * Account label.\n\t\t * @type {string}\n\t\t */\n\t\tthis.label = label;\n\t\t/**\n\t\t * Secret key.\n\t\t * @type {Secret}\n\t\t */\n\t\tthis.secret = typeof secret === 'string'\n\t\t\t? Secret.fromB32(secret)\n\t\t\t: secret;\n\t\t/**\n\t\t * HMAC hashing algorithm.\n\t\t * @type {string}\n\t\t */\n\t\tthis.algorithm = algorithm;\n\t\t/**\n\t\t * Token length.\n\t\t * @type {number}\n\t\t */\n\t\tthis.digits = digits;\n\t\t/**\n\t\t * Token time-step duration.\n\t\t * @type {number}\n\t\t */\n\t\tthis.period = period;\n\t}\n\n\t/**\n\t * Generates a TOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.digits=6] Token length.\n\t * @param {number} [config.period=30] Token time-step duration.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @returns {string} Token.\n\t */\n\tstatic generate({\n\t\tsecret,\n\t\talgorithm,\n\t\tdigits,\n\t\tperiod = defaults.period,\n\t\ttimestamp = Date.now()\n\t}) {\n\t\treturn HOTP.generate({\n\t\t\tsecret,\n\t\t\talgorithm,\n\t\t\tdigits,\n\t\t\tcounter: Math.floor(timestamp / 1000 / period)\n\t\t});\n\t}\n\n\t/**\n\t * Generates a TOTP token.\n\t * @param {Object} [config] Configuration options.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @returns {string} Token.\n\t */\n\tgenerate({\n\t\ttimestamp = Date.now()\n\t} = {}) {\n\t\treturn TOTP.generate({\n\t\t\tsecret: this.secret,\n\t\t\talgorithm: this.algorithm,\n\t\t\tdigits: this.digits,\n\t\t\tperiod: this.period,\n\t\t\ttimestamp\n\t\t});\n\t}\n\n\t/**\n\t * Validates a TOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {Secret} config.secret Secret key.\n\t * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n\t * @param {number} [config.period=30] Token time-step duration.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @param {number} [config.window=1] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tstatic validate({\n\t\ttoken,\n\t\tsecret,\n\t\talgorithm,\n\t\tperiod = defaults.period,\n\t\ttimestamp = Date.now(),\n\t\twindow\n\t}) {\n\t\treturn HOTP.validate({\n\t\t\ttoken,\n\t\t\tsecret,\n\t\t\talgorithm,\n\t\t\tcounter: Math.floor(timestamp / 1000 / period),\n\t\t\twindow\n\t\t});\n\t}\n\n\t/**\n\t * Validates a TOTP token.\n\t * @param {Object} config Configuration options.\n\t * @param {string} config.token Token value.\n\t * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n\t * @param {number} [config.window=1] Window of counter values to test.\n\t * @returns {number|null} Token delta, or null if the token is not found.\n\t */\n\tvalidate({\n\t\ttoken,\n\t\ttimestamp,\n\t\twindow\n\t}) {\n\t\treturn TOTP.validate({\n\t\t\ttoken: Utils.pad(token, this.digits),\n\t\t\tsecret: this.secret,\n\t\t\talgorithm: this.algorithm,\n\t\t\tperiod: this.period,\n\t\t\ttimestamp,\n\t\t\twindow\n\t\t});\n\t}\n\n\t/**\n\t * Returns a Google Authenticator key URI.\n\t * @returns {string} URI.\n\t */\n\ttoString() {\n\t\treturn URI.stringify(this);\n\t}\n}\n","/**\n * Library version.\n * @type {string}\n */\nexport const version = process.env.VERSION;\n","/**\n * One Time Password (HOTP/TOTP) library for Node.js and browser.\n * @module OTPAuth\n * @author Héctor Molinero Fernández <hector@molinero.dev>\n */\nimport { HOTP, TOTP } from './otp';\nimport { URI } from './uri';\nimport { Secret } from './secret';\nimport { Utils } from './utils';\nimport { version } from './version';\n\nexport default { HOTP, TOTP, URI, Secret, Utils, version };\nexport { HOTP, TOTP, URI, Secret, Utils, version };\n"],"sourceRoot":""}